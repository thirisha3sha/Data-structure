/*To define a singly linked list node and perform operations such as insertions and deletions
dynamically */
#include <stdio.h>
#include <stdlib.h>

struct node {
    int label;
    struct node *next;
};

int linearSearch(struct node *head, int key) {
    struct node *temp = head->next;
    while (temp != NULL) {
        if (temp->label == key) {
            return 1;  // Element found
        }
        temp = temp->next;
    }
    return 0;  // Element not found
}

int main() {
    int ch, key, found;
    struct node *head, *temp, *new_node;

    // Head node construction
    head = (struct node*) malloc(sizeof(struct node));
    head->label = -1;
    head->next = NULL;

    while (1) {
        printf("\n\nSINGLY LINKED LIST OPERATIONS\n");
        printf("1. Add\n");
        printf("2. Delete\n");
        printf("3. View\n");
        printf("4. Linear Search\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch(ch) {
            case 1:
                printf("\nEnter label after which to add: ");
                scanf("%d", &key);

                temp = head;
                while (temp != NULL && temp->label != key) {
                    temp = temp->next;
                }

                if (temp == NULL) {
                    printf("Node not found\n");
                } else {
                    new_node = (struct node*) malloc(sizeof(struct node));
                    printf("Enter label for new node: ");
                    scanf("%d", &new_node->label);
                    new_node->next = temp->next;
                    temp->next = new_node;
                }
                break;

            case 2:
                printf("Enter label of node to be deleted: ");
                scanf("%d", &key);

                temp = head;
                while (temp->next != NULL && temp->next->label != key) {
                    temp = temp->next;
                }

                if (temp->next == NULL) {
                    printf("Node not found\n");
                } else {
                    struct node *toDelete = temp->next;
                    temp->next = temp->next->next;
                    free(toDelete);
                    printf("Node deleted successfully\n");
                }
                break;

            case 3:
                printf("\nHEAD -> ");
                temp = head->next;
                while (temp != NULL) {
                    printf("%d -> ", temp->label);
                    temp = temp->next;
                }
                printf("NULL\n");
                break;

            case 4:
                printf("Enter the element to search: ");
                scanf("%d", &key);
                found = linearSearch(head, key);
                if (found) {
                    printf("The element is found\n");
                } else {
                    printf("The element is not found\n");
                }
                break;

            case 5:
                exit(0);
                break;

            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    }

    return 0;
}

