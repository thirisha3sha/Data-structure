/*Design a stack that supports push, pop, top, and retrieving the minimum element in
constant time.
Implement the MinStack class:
1. MinStack() initializes the stack object.
2. void push(int val) pushes the element val onto the stack.
3. void pop() removes the element on the top of the stack.
4. int top() gets the top element of the stack.
5. int getMin() retrieves the minimum element in the stack.
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]
Output
[null,null,null,null,-3,null,0,-2]
Explanation:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top(); // return 0
minStack.getMin(); // return -2 */
#include <stdio.h>
#define MAX_SIZE 10
int stack[MAX_SIZE];
int minStack[MAX_SIZE];
int top = -1;
int push(int val) 
{
    if (top == MAX_SIZE - 1) 
	{
        printf("Stack is full. Cannot push.\n");
        return -1; // Indicate failure
    }

    if (top == -1 || val <= minStack[top]) 
	{
        minStack[++top] = val;
    }
    stack[++top] = val;
    printf("Pushed: %d\n", val);
    return 0; // Indicate success
}
int pop() 
{
    if (top == -1) 
	{
        printf("Stack is empty. Cannot pop.\n");
        return -1; // Indicate failure
    }
	int popped = stack[top--];
	if (popped == minStack[top + 1]) 
	{
        top--; // Adjust minStack when the minimum element is popped
    }
	printf("Popped: %d\n", popped);
    return popped; // Return popped value
}

int topElement() 
{
    if (top == -1) 
	{
        printf("Stack is empty. Cannot get top element.\n");
        return -1; // Indicate failure
    }
    printf("Top Element: %d\n", stack[top]);
    return stack[top];
}

int getMin()
 {
    if (top == -1) 
	{
        printf("Stack is empty. Cannot get minimum element.\n");
        return -1; // Indicate failure
    }
    printf("Minimum Element: %d\n", minStack[top]);
    return minStack[top];
}

int main() 
{
    push(3);
    push(5);
    getMin();
    push(2);
    push(1);
    getMin();
    pop();
    getMin();
    pop();
    topElement();
    return 0;
}
