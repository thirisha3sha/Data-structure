//bfs tree traversal
#include <stdio.h>
 int n, i, j, visited[10], queue[10], front = -1, rear = -1;
int adj[10][10];
 void bfs(int v)
{
    // Mark the current vertex as visited
    visited[v] = 1;
    // Enqueue the current vertex
    queue[++rear] = v;
    while (front != rear) 
	{
        // Dequeue a vertex from the queue
        v = queue[++front];
        printf("%d ", v); // Print the visited vertex
        // Visit all adjacent vertices of the dequeued vertex
        for (i = 1; i <= n; i++) 
		{
            if (adj[v][i] && !visited[i])
			 {
                visited[i] = 1;
                queue[++rear] = i;
            }
        }
    }
}
 
int main()
{
    int v;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    for (i = 1; i <= n; i++) 
	{
        queue[i] = 0;
        visited[i] = 0;
    }
    printf("Enter graph data in matrix form:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &adj[i][j]);
        }
    }
    printf("Enter the starting vertex: ");
    scanf("%d", &v);
    bfs(v);
    // Check if all nodes are reachable
    int allNodesReachable = 1;
    for (i = 1; i <= n; i++) 
	{
        if (!visited[i])
		{
            allNodesReachable = 0;
            break;
        }
    }
    if (allNodesReachable) 
	{
        printf("\nBFS traversal is complete. All nodes are reachable.\n");
    } else 
	{
        printf("\nBFS is not possible. Not all nodes are reachable.\n");
    }
    
    return 0;
}
